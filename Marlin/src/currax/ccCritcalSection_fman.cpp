/*==============================================================================
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "stdafx.h"
#include <stdint.h>

#include "interrupt.h"

#include "ccCriticalSection.h"

namespace CC
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Global flag, zero if interrupts were enabled prior to disabling 
// interrupts.
 
uint32_t r_primask = 0;

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Created a critical section. Pass the returned code to the following
// functions.

void* createCriticalSection()
{
   return 0;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Enter a critical section. This is used to lock a resource for a short
// time interval.

void enterCriticalSection(void* aCriticalSection)
{
    cpu_irq_enter_critical();
    return;
   // Get the current interrupt enable state. It is zero if interrupts are
   // enabled.
   r_primask = __get_PRIMASK();
   __disable_irq();
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Leave a critical section. This is used to unlock a resource.

void leaveCriticalSection(void* aCriticalSection)
{
    cpu_irq_leave_critical();
    return;
   // If interrupts were enabled prior to disabling them then enable them.
   if (r_primask==0)
   {
      __enable_irq();
   }
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Destroy a critical section.

void destroyCriticalSection(void* aCriticalSection)
{
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace

