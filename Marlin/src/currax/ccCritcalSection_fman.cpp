/*==============================================================================
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "stdafx.h"
#include <stdint.h>

#include "interrupt.h"

#include "ccCriticalSection.h"

namespace CC
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Global flag, zero if interrupts were enabled prior to disabling 
// interrupts.
 
uint32_t r_primask = 0;

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Created a critical section. Pass the returned code to the following
// functions.

void* createCriticalSection()
{
   return 0;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Enter a critical section. This is used to lock a resource for a short
// time interval.

void enterCriticalSection(void* aCriticalSection)
{
   if (cpu_irq_is_enabled())
   {
      cpu_irq_disable();
      cpu_irq_prev_interrupt_state = true;
   }
   else
   {
      cpu_irq_prev_interrupt_state = false;
   }
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Leave a critical section. This is used to unlock a resource.

void leaveCriticalSection(void* aCriticalSection)
{
	if (cpu_irq_prev_interrupt_state)
   {
		cpu_irq_enable();
   }
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Destroy a critical section.

void destroyCriticalSection(void* aCriticalSection)
{
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace

